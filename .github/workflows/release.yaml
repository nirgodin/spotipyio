name: release

on:
  pull_request:
    types: [ "closed" ]
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  should-run:
    name: Checking if job should run
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    outputs:
      should_build: ${{ steps.filter.outputs.spotipyio }}

    steps:
    - uses: actions/checkout@v4
    - name: Filter files changed in PR
      id: filter
      uses: dorny/paths-filter@v2
      with:
        filters: |
          spotipyio:
            - 'spotipyio/**'

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [ should-run ]
    if: ${{ needs.should-run.outputs.should_build == 'true' }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build a binary wheel and a source tarball
        run: make build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    name: Publish to PyPI
    needs: [ build ]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/spotipyio

    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-publish:
    name: Publishes to GitHub
    runs-on: ubuntu-latest
    needs: [ pypi-publish ]

    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.merge_commit_sha }}
        fetch-depth: '0'

    - name: Get version from pyproject.toml
      id: get_version
      run: |
        PACKAGE_VERSION="v$(sed -n 's/^version = "\(.*\)"/\1/p' pyproject.toml)"
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

    - name: Push tag
      uses: anothrNick/github-tag-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CUSTOM_TAG: ${{ env.PACKAGE_VERSION }}

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ env.PACKAGE_VERSION }}'
        --repo '${{ github.repository }}'
        --notes ""

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ env.PACKAGE_VERSION }}' dist/**
        --repo '${{ github.repository }}'
